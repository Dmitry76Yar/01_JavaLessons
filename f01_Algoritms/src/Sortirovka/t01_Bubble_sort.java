package Sortirovka;

import java.util.Arrays;

/* Пузырьковая сортировка
Данный алгоритм сортировки известен в первую очередь за счёт своей простоты, однако при этом он имеет одну из наиболее низких 
скоростей выполнения.
	В качестве примера рассмотрим пузырьковую сортировку для чисел в возрастающем порядке.
	Представим себе цепочку случайно расставленных чисел, для которых будут выполняться следующие шаги, начиная с начала цепочки:
 - сравнить два числа;
 - если число слева больше, то поменять их местами;
 - перейти на одну позицию вправо.
После прохождения по всей цепочке с выполнением данных шагов мы обнаружим, что наибольшее число оказалось в конце нашего ряда чисел.
	Далее выполняется точно такой же проход по цепочке с выполнением вышеописанных шагов. Но в этот раз мы не будем включать 
последний элемент списка, так как он самый большой и уже стоит на последнем месте, как и должен.
	Опять, же мы получим последний элемент в конце нашего ряда рассматриваемых чисел. 
	Соответственно, уже два наибольших числа будут стоять на своих местах.
И опять запускается проход по цепочке за исключением элементов, которые уже на своих местах, до тех пор, пока все элементы не будут
стоять в необходимом порядке.		
	Пузырьковая сортировка весьма и весьма медленная, с временной сложностью O(N²), так как мы имеем вложенные циклы. 
	Внешний проход по элементам выполняется за N раз, внутренний — тоже N раз, и в итоге мы получаем N*N, N² итераций   */

public class t01_Bubble_sort {
	
	public static void  bubbleSort(int[] array) {
	       for(int i = array.length -1; i > 0; i--) {
	         for (int j = 0; j < i; j++) { 
	             if (array[j] > array[j+1]) {
	                 int temp = array[j];
	                 array[j] = array[j+1];
	                 array[j+1] = temp;	   }
	         }
	         System.out.println(Arrays.toString(array));
	       }
	}
		
public static void main(String[] args) {
	int[] testArr = new int[]{6,3,8,2, 6,9,4,11,1};
    bubbleSort(testArr);
       for (int i : testArr) {
           System.out.print(i + " -> ");
       }
   }
}
