package Sortirovka;

import java.util.Arrays;

/*	Сортировка методом выбора
	Данный алгоритм имеет схожесть с пузырьковой сортировкой, но работает он несколько быстрее.
	Опять в качестве примера возьмём ряд чисел, которые мы хотим расставить в возрастающем порядке.
	Суть алгоритма заключается в последовательном переборе всех чисел и выборе наименьшего элемента, который мы возьмём и поменяем 
местами с крайним элементом слева (0 элементом).
	Тут у нас получается ситуация, схожая с пузырьковой сортировкой, но в данном случае отсортированным элементом у нас будет 
наименьший.
	Поэтому, следующий проход по элементам будет начинаться с элемента под индексом 1. Опять же, данные проходы будет повторяться 
до тех пор, пока все элементы не будут отсортированы.	
	Данный алгоритм превосходит пузырьковую сортировку, ведь тут количество необходимых перестановок сокращается с O(N²) до O(N): 
мы не гоняем один элемент через весь список, но тем не менее, количество сравнений остается O(N²).
 */

public class t02_SortBySelect {
	
	public static void sortBySelect(int[] array) {
       for (int i = 0; i < array.length-1; i++) { // внешний обычный  цикл
           int min = i;
           for (int j = i + 1; j < array.length; j++) { // обычный цикл, но с отчетом с сортированных чисел
               if (array[j] < array[min]) {
                   min = j;   }
	        }
	       int temp = array[i];     // вставка отссортиованного числа, в положеную ему ячейку
	       array[i] = array[min];
	       array[min] = temp;
//	       System.out.println(Arrays.toString(array));
	       }
	}
	
public static void main(String[] args) {
	  int[] testArr = new int[]{6, 3, 8, 2, 6, 9, 4, 11, 1};
      sortBySelect(testArr);
      for (int i : testArr) {
          System.out.print(i + " -> ");   }
	}

}
