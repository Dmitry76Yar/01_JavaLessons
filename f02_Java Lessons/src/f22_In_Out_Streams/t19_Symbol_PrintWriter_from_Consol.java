package f22_In_Out_Streams;

import java.io.PrintWriter;

/* 	Символьные потоки
Байтовые потоки Java отличаются эффективностью и удобством использования. Но во всем, что касается ввода-вывода символов, они
далеки от идеала. Для преодоления этого недостатка в Java определены классы символьных потоков.
	Потоки байтов в Java позволяют произвести ввод и вывод 8-битных байтов, в то время как потоки символов используются для ввода и вывода
16-битного юникода. Не смотря на множество классов, связанных с потоками символов, наиболее распространено использование следующих 
классов: FileReader и FileWriter. 
	Не смотря на тот факт, что внутренний FileReader использует FileInputStream, и FileWriter использует FileOutputStream, основное 
различие состоит в том, что FileReader производит считывание двух байтов в конкретный момент времени, в то время как FileWriter 
производит запись двух байтов за то же время.
			Методы, определенные в классе Reader
- abstract void close ()	- Закрывает источник ввода. Дальнейшие лопытки чтения будут генерировать исключение IOException
- void mark (int numChars) - Помещает в текущую позицию входного потока метку, которая будет находиться там до тех пор, пока не будет прочитано количество байтов, определяемое параметром numChars
- boolean markSupported () - Возвращает значение true, если методы mark () и reset () поддерживаются вызывающим потоком
- int read()				- Возвращает целочисленное представление следующего символа в вызывающем входном потоке. По достижении конца потока возвращается значение -1
- int read(char buffer[])	- Пытается прочитать buffer.length символов в массив buffer, возвращая фактическое количество успешно 
							  прочитанных символов. По достижении конца потока возвращается значение -1
- abstract int read(char buffer[], int offset, int numChars) - Пытается прочитать количество символов, определяемое параметром numChars,
 							в массив buffer, начиная с элемента buffer[offset]. По достижении конца потока возвращается значение -1
- int read (CharBuffer buffer)  - Пытается заполнить буфер, определяемый параметром buffer, и возвращает количество успешно 
							прочитанных символов. По достижении конца потока возвращается значение -1.
- boolean ready ()			- Возвращает значение true, если следующий запрос на получение символа может быть выполнен без ожидания. В противном случае возвращается значение false
- void reset ()			- Сбрасывает входной указатель на ранее установленную метку 
- long skip(long numChars) - Пропускает numChars символов во входном потоке, возвращая фактическое количество пропущенных символов
			Методы, определенные в классе Writer
- Writer append (char ch)	- Добавляет символ ch в конец вызывающего выходного потока, возвращая ссылку но вызывающий поток
- Writer append (CharSequencechars)	- Добавляет последовательность символов ch rs в конец вызывающего потока, возвращая ссылку на
 							вызывающий поток. CharSequence- это интерфейс, определяющий операции над последовательностями символов, 
 							выполняемые в режиме "только чтение"
- Writer append (CharSequence chars, int begin, int еnd) - Добавляет последовательность символов chars в конец текущего потока,
							начиная с позиции, определяемой параметром begin, и заканчивая позицией, определяемой параметром end.
							Возвращает ссылку но вызывающий поток. CharSequence - это интерфейс, определяющий операции над 
							последовательностями символов, выполняемые 
- abstract void close ()	- Закрывает выходной поток. Дальнейшие попытки чтения будут генерировать исключение IOException
- abstract void flush ()	- Выполняет принудительную передачу содержимого выходного буфера в место назначения {тем самым очищая выходной буфер)
- void write (int ch)		- Записывает один символ в вызывающий выходной поток. Обратите внимание но то, что параметр имеет тип int,
 							  что позволяет вызывать метод write () с выражениями, не приводя их к типу char
- void write (char buffer[]) - Записывает полный массив символов buffer в вызывающий выходной поток
- abstract void write (char buffer(], int offset, int numChars) -  Записывает часть массива символов Ьuffer в количестве numChars
 							                символов, начиная с элемента buffer[offset], в вызывающий выходной поток
- void write(String str)	- Записывает строку str в вызывающий выходной поток
- void write (String str, int offset, int numChars) - Записывает часть строки str в количестве numChars символов, начиная с позиции, 
													определяемой параметром offset, в вызывающий поток */ 

/* 		Консольный вывод с использованием PrintWriter
 	StringWriter - символьный поток вывода, наследник абстрактного класса Writer
	Несмотря на то что поток стандартного вывода System.out вполне пригоден для вывода на консоль, в большинстве случаев такой подход
рекомендуется использовать лишь в целях отладки или при создании очень простых программ.
 	В реальных прикладных программах на Java вывод на консоль обычно организуется через поток PrintWriter. Как уже упоминалось, 
 применение потоков упрощает локализацию прикладных программ.
	Конструктор PrintWriter(OutputStream outputStream, boolean flushOnNewline), где в качестве 
		- первого параметра, outputStream, конструктору передается объект типа OutputStream,
		-  а второй параметр, flushOnNewline, указывает, должен ли буфер выходного потока сбрасываться каждый раз, когда вызывается 
		(среди прочих других) метод println (). При true пареметре flushOnNewline сбрасывание буфера выполняется автоматически.
		
	В классе PrintWriter поддерживаются методы print () и println () для всех типов, включая Object.
Следовательно, методы print () и println () можно использовать точно так же, как и совместно с потоком вывода System.out. 
Если значение аргумента не относится к простому типу, то методы класса PrintWriter вызывают метод toString () для объекта.
	Для вывода данных на консоль через поток типа PrintWriter следует указать System.out в качестве выходного потока и обеспечить 
вывод данных из буфера после каждого вызова метода println (). 
Например, при выполнении следующей строки кода создается объект типа PrintWriter, связанный с консолью:
	PrintWriter pw = new PrintWriter(System.out, true);
	
Ниже приведен пример программы, демонстрирующий использование класса PrintWriter для организации вывода на консоль. */


public class t19_Symbol_PrintWriter_from_Consol {
public static void main(String[] args) {
	PrintWriter pw = new PrintWriter(System.out, true);
	int i = 10;
	double d = 123.42;
	pw.println("Иcnoльзoвaниe класса PrintWriter");
	pw.println(i);
	pw.println(d);
	pw.println(i +" +" + d +" " + (i+d));

	}
}
