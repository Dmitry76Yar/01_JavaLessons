package f22_In_Out_Streams;
/* Автоматическое закрытие файлов 		Скорректированный пример по копированию файлов
	В примерах ниже метод close () вызывался явным образом. 
	В версию JDK 7 включен более рациональный способ управления ресурсами, в том числе и потоками файлового ввода-вывода,
автоматизирующий процесс закрытия файлов. 
	Этот способ основывается на новой разновидности оператора try, называемой оператором try с ресурсами. 
	Главное преимущество оператора try с ресурсами заключается в том, что он предотвращает ситуации, в которых файл (или другой ресурс) 
непреднамеренно остается неосвобожденным и после того, как необходимость в его использовании отпала. 
	Так выглядит общая форма оператора try с ресурсами.try (описание_ресурса)
 	По завершении блока try объявленный ресурс автоматически освобождается. Если этим ресурсом является файл, то он автоматически 
 закрывается, что избавляет от необходимости вызывать метод close () явным образом.
	Область применимости таких операторов try ограничена ресурсами, которые реализуют интерфейс AutoCloseaЬle, определенный в пакете
java. lang. В этом интерфейсе определен метод close (). Интерфейс AutoCloseaЫe наследуется интерфейсом CloseaЬle, определенным в пакете
java. io. Оба интерфейса реализуются классами потоков, в том числе FileinputStream и FileOutputStream.
 	Стоит упомянуть еще об одной особенности оператора try с ресурсами. Вообще говоря, возникшее при выполнении блока try исключение
может породить другое исключение при закрытии ресурса в блоке finally. В случае "обычного" оператора try первоначальное исключение 
теряется, будучи прерванным вторым исключением. Но в случае оператора try с ресурсами второе исключение подавляется. При этом оно не 
теряется, а просто добавляется в список подавленных исключений, связанных с первым исключением. Этот список можно получить, вызвав 
метод getSuppressed () , определенный в классе Throwable */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

public class t06_Auto_Close {
public static void main(String[] args) {
	int i = 0;
	/* Переменная fin является локальной по отношению к блоку try и создается при входе в этот блок. При выходе из блока try файл, 
	 связанный с переменной fin, автоматически закрывается с помощью неявно вызываемого метода close () */ 
	
	/* Использование try с ресурсами для открытия файла с последующим его закрытием после того, как будет покинут блок try
	   Важно понимать, что ресурс, объявленный в операторе try, неявно принимает модификатор final
	   С помощью одного подобного оператора try можно управлять несколькими ресурсами, через разделение точкой с запятой. */
	try (FileInputStream fis = new FileInputStream("C:\\Users\\dkuli\\Documents\\My_works\\Lessons\\CopyFrom.txt"); 
	     FileOutputStream fos = new FileOutputStream("C:\\Users\\dkuli\\Documents\\My_works\\Lessons\\CopyIn1.txt")) {
			while (fis.available() >0) {			// пока остались непрочитанные байты
				i = fis.read();						// осуществлять чтение файла
				if (i!=-1) fos.write((char)(i));}
	}
	catch (FileNotFoundException e) {
		System.out.println("Ошибка открытия файлов");
		e.printStackTrace(); }
	catch (Exception e) {
		e.getStackTrace();
		System.out.println("Ошибка чтения - записи"); }
		
	System.out.println("Main завершен успешно");	

	}
}
