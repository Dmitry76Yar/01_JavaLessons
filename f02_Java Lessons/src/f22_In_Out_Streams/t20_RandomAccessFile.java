package f22_In_Out_Streams;

import java.io.IOException;
import java.io.RandomAccessFile;

/* Файлы с произвольным доступом
RandomAccessFile наследуется напрямую от Object и не наследуется от базовых классов ввода\вывода. 
Предназначен для работы с файлами, поддерживая произвольный доступ к их содержимому и позволяет перемещаться по файлу, читать из него
или писать в него, как вам будет угодно.

Работа с классом RandomAccessFile напоминает использование совмещенных в одном классе потоков DataInputStream и DataOutputStream 
(они реализуют те же интерфейсы DataInput и DataOutput). Кроме того, метод seek() позволяет переместиться к определенной позиции 
и изменить хранящееся там значени

Вы также сможете заменить существующие части файла, речь идет о обновлении содержимого файла, а точней о обновлении фрагмента файла.
Это невозможно сделать с помощью FileInputStream или FileOutputStream, но RandomAccessFile даст вам эту возможность.
	Класс RandomAccessFile не является производным от класса InputStream или OutputStream. 
	Вместо этого он реализует интерфейсы Datainput и DataOutput, в которых объявлены основные методы ввода-вывода.
	Кроме того, он поддерживает запросы с позиционированием, т.е. позволяет задавать положение указателя файла произвольным образом. 
	Конструктор класса RandomAccessFile - RandomAccessFile(String имя_файла, String доступ) throws FileNotFoundException
Здесь конкретный файл указывается с помощью параметра имя_файла, а параметр доступ определяет, какой именно тип доступа будет 
использоваться для обращения к файлу. Если параметр доступ принимает значение "r", то данные могут читаться из
файла, но не записываться в него. Если же указан тип доступа "rw", то файл открывается как для чтения, так и для записи.  
	Метод seek (long новая_позиция) - предназначен для установки текущего положения указателя файла.
	Здесь параметр новая_ позиция определяет новое положение указателя файла в байтах относительно начала файла. Операция чтения 
или записи, следующая после вызова метода seek (), будет выполняться относительно нового положения указателя.
	В классе RandomAccessFile определены методы read () и write (). Этот класс реализует также интерфейсы Datainput и DataOuput, т.е.
в нем доступны методы чтения и записи простых типов, например readint () и wri teDouЫe ().

	Программа ниже демонстрирует ввод-вывод с произвольным доступом. В этой программе шесть значений типа douЫe сначала записываются в файл,
а затем читаются из него, причем порядок их чтения отличается от порядка записи */


public class t20_RandomAccessFile {
public static void main(String[] args) {
	
	/* Конструктор класса RandomAccessFile - RandomAccessFile(String имя_файла, String доступ) throws FileNotFoundException
Здесь конкретный файл указывается с помощью параметра имя_файла, а параметр доступ определяет, какой именно тип доступа будет 
использоваться для обращения к файлу. Если параметр доступ принимает значение "r", то данные могут читаться из
файла, но не записываться в него. Если же указан тип доступа "rw", то файл открывается как для чтения, так и для записи.  */
	double data[] = {19.4, 10.1, 123.54, 33.0, 87.9, 74.25 };
	double d;
		// Открыть и использовать файл с произвольным доступом
	try (RandomAccessFile raf = new RandomAccessFile("Data1", "rw")) {
		for (double element : data) { raf.writeDouble(element);}		// Записать значения в файл
	
	
	/* Метод seek (long новая_позиция) - предназначен для установки текущего положения указателя файла.
Здесь параметр новая_ позиция определяет новое положение указателя файла в байтах относительно начала файла. Операция чтения 
или записи, следующая после вызова метода seek (), будет выполняться относительно нового положения указателя. */
		// Прочитать первое значение из файла
	raf.seek(0);			// найти первое значение типа double
	d = raf.readDouble();
	System.out.println("Пepвoe значение: " + d);
	
		// Прочитать второе значение из файла 
	/* Поскольку для хранения значения типа double требуется 8 байтов, каждое последующее значение начинается на 8-байтовой границе 
	 предьшущего значения. Иными  словами, первое числовое значение начинается с нулевого байта, второе - с 8-ro байта,
	третье - с 16-ro байта и т.д. */
	raf.seek(8);			// найти второе значение типа double
	d = raf.readDouble();
	System.out.println("Второе значение: " + d);
	
	raf.seek(8 * 3); // найти четвертое значение типа double
	d = raf.readDouble();
	System.out.println("Чeтвepтoe значение: " + d);
}
	catch (IOException e) {
		System.out.println("Ошибка записи"); }
		
			
	}
}
