package f21_COLLECTIONS;

/* Иерархия класса ArrayDeque - интерфейс Collection - интерфейс Queue - интерфейс Deque - класс AbstractCollection - класс ArrayDeque 
  Очереди бывают однонаправленными и двунаправленными
Однонаправленные очереди работают по FIFO (first in - first out) и по LIFO  (last in - first out)
Очередь FIFO - очередь в магазин. Первым в магазин попадет тот, кто встал в очередь первым
При работе с FIFO очередью новые элементы добавляются в конец, а если ты хочешь получить элемент, он будет взят из начала.
Стек LIFO - как стопка тарелок - тарелка, которую положили первой, а затем на нее положили еще тарелки, будет взята последняя
При работе с LIFO очередью новые элементы добавляются в начало, а если ты хочешь получить элемент, он будет взят также из начала.

В Java очередь представлена не классом, а интерфейсом — Queue <E>, который расширяет базовый интерфейс Collection 
От Queue наследуются 4 разных интерфейса, и крайне внушительный список классов: 		
Subinterfaces: BlockingDeque<E>, BlockingQueue<E>, Deque<E>, TransferQueue<E>
Classes: AbstractQueue, ArrayBlockingQueue, ArrayDeque, ConcurrentLinkedDeque, ConcurrentLinkedQueue, DelayQueue, 
      LinkedBlockingDeque, LinkedBlockingQueue, LinkedList, LinkedTransferQueue, PriorityBlockingQueue, PriorityQueue, SynchronousQueue 

		Интерфейс Deque
У интерфейса Deque 2 наследника - Класс LinkedList и класс ArrayDeque
Deque расширяет Queue и описывает поведение двунаправленной очереди. 
Двунаправленная очередь может функционировать как стандартная очередь FIFO либо как стек LIFO.

		Методы интерфейса Queue
 - element() - возвращает элемент из головы очереди. Элемент не удаляется. Если очередь пуста, инициируется исключение NoSuchElementException.
 - Е remove() - удаляет элемент из головы очереди, возвращая его. Инициирует исключение NoSuchElementException, если очередь пуста.
 - peek() - возвращает (но не удаляет из очереди) первый элемент.
 - Е роll() - возвращает элемент из головы очереди и удаляет его. Возвращает null, если очередь пуста.
 - boolean offer(Е оbj) - пытается добавить оbj в очередь. Возвращает true, если оbj добавлен, и false в противном случае.
 
 		Методы интерфейса Deque
 - addFirst() — добавляет новый элемент в начало очереди.
 - addLast() — добавляет элемент в конец очереди.
 - boolean offerFirst(E obj): добавляет элемент obj в самое начало очереди. Если элемент удачно добавлен, возвращает true, иначе - false
 - boolean offerLast(E obj): добавляет элемент obj в конец очереди. Если элемент удачно добавлен, возвращает true, иначе - false
 - void push(E element): добавляет элемент в самое начало очереди
 - getFirst(): возвращает без удаления элемент из головы очереди. Если очередь пуста, генерирует исключение NoSuchElementException
 - getLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, генерирует исключение NoSuchElementException
 - peekFirst(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
 - peekLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, возвращает значение null
 - pollFirst() — возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
 - pollLast() — возвращает с удалением последний элемент очереди. Если очередь пуста, возвращает значение null
 - pop(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
 - removeFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
 - removeLast(): возвращает с удалением элемент из конца очереди. Если очередь пуста, генерирует исключение NoSuchElementException 
 - boolean removeFirstOccurrence(Object obj): удаляет первый встреченный элемент obj из очереди. Если удаление произшло, то возвращает true, иначе возвращает false.
 - boolean removeLastOccurrence(Object obj): удаляет последний встреченный элемент obj из очереди. Если удаление произшло, то возвращает true, иначе возвращает false.	
	
	У интерфейса Deque 2 наследника - Класс LinkedList и класс ArrayDeque
ArrayDeque представляют обобщенную двунаправленную очередь.
Из ArrayDeque можно организовать стек и очередь. 

Push и pop -- общепринятые названия методов структуры данных "Стэк" LIFO. Поэтому если вы хотите использовать объект данного класса 
только в качестве Стэка, то рекомендуется вызывать именно эти методы, так грамотному специалисту легче понять, что за структура данных
перед ним и какова цель её использования в программе.	*/	

public class t05_ArrayDeque {

	public static void main(String[] args) {
		
	}
}
