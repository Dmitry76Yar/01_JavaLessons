package t23_Files_Path;

/* 
 * Немного истории
	Изначально Java предоставляла класс File (в пакете java.io) для доступа к файловым системам. Этот класс представляет файл/каталог в
файловой системе и позволяет выполнять такие операции, как проверка на существование файла/каталога, получении свойств, и удаление 
файла/каталога. Тем не менее, ощущалась явная необходимость доработки I/O API.
	I/O (input/output, Ввод-вывод ) — взаимодействие между обработчиком информации и её поставщиком и/или получателем. 
	Краткий список недостатков первой I/O API:
Классу File не хватало функциональности. Например не было метода copy для копирования файла/каталога.
В классе File определено много методов, которые возвращают Boolean-значение. В случае ошибки, возвращалось false, а не бросалось 
исключение, что затрудняло обнаружение и исправление ошибок.
Класс File не предоставляет хорошей обработки символьных ссылок.
Класс File обрабатывает файлы/каталоги неэффективно (проблемы с масштабированием);
Класс File предоставляет доступ к ограниченному набору атрибутов файлов, который зачастую недостаточен.
	Для преодоления этих проблем, в Java 4 введен NIO (New IO). NIO (Non-blocking I/O, New I/O) — коллекция прикладных программных
интерфейсов для языка Java, предназначенных для реализации высокопроизводительных операций ввода-вывода.
	Ключевые особенности NIO:
- Каналы и селекторы: NIO поддерживает различные типы каналов. Канал является абстракцией объектов более низкого уровня файловой системы
(например, отображенные в памяти файлы и блокировки файлов), что позволяет передавать данные с более высокой скоростью. Каналы не
блокируются и поэтому Java предоставляет еще такие инструменты, как селектор, который позволяет выбрать готовый канал для передачи 
данных, и сокет, который является инструментом для блокировки.
 - Буферы: в Java 4 была введена буферизация для всех классов-обёрток примитивов (кроме Boolean). Появился абстрактный класс Buffer,
который предоставляет такие операции, как clear, flip, mark и т.д. Его подклассы предоставляют методы для получения и установки данных
 - Кодировки: в Java 4 появились кодировки (java.nio.charset), кодеры и декодеры для отображения байт и символов Unicode.

	В Java 7 был введён пакет java.nio.file для лучшей поддержки и обработки символьных ссылок, полного доступа к атрибутам и работы с
файловой системой через интерфейсы или классы, такие как Path, Paths, and Files. */

/* 		Использование интерфейса Path
Java 7 представляет новую абстракцию для пути, а именно интерфейс Path.  
Объект пути содержит имена каталогов и файлов, которые составляют полный путь до файла/каталога, представленного объектом Path; 
Path содержит методы для извлечения элементов пути, манипуляций с ними и их добавления.
	Ниже приведён пример кода, для выполнения на Unux-системе, но пользователи Windows могут раскомментировать одну строку и 
закомментировать другую, для выполнения примера на своих машиах (см. комментарии в коде). Существование соответствующих файлов и 
катологов (test и testfile.txt) в файловой системе не обязательно. В этом примере создаётся объект Path и извлекается основная
информация, связанная с ним:
 */



public class t02_NIO_Theory {
public static void main(String[] args) {

	
	
	}

}
