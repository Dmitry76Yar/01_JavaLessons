package t23_Files_Path;

import java.io.File;
import java.io.IOException;

/* 		Класс File
В отличие от большинства классов ввода/вывода, класс File работает не с потоками, а работает непосредственно с файлами.
Данный класс позволяет получить информацию о файле: права доступа, время и дата создания, путь к каталогу. А также осуществлять 
навигацию по иерархиям подкаталогов.
	Каталог
Каталог - это объект класса File, который содержит список других файлов и каталогов. После создания объекта класса File, являющего 
каталогом, его метод isDirectory() вернёт значение true. И тогда вы можете вызывать метод list().
Для создания каталога можно использовать метод mkdir(), который вернёт true в успешном случае. Если указанный путь уже существует 
или каталог нельзя создать из-за отсутствия полного пути к нему, то вернётся false.
Метод mkdirs() создаёт сам каталог, так и всех его родителей.

		Но в Java 7 создатели языка решили изменить работу с файлами и каталогами.
Это произошло из-за того, что у класса File был ряд недостатков. Например, в нем не было метода copy(), который позволил бы 
скопировать файл из одного места в другое (казалось бы, явно необходимая функция).
	Кроме того, в классе File было достаточно много методов, которые возвращали boolean-значения. При ошибке такой метод возвращает false, а не выбрасывает исключение, что делает диагностику ошибок и установление их причин очень непростым делом.
	Вместо единого класса File появились целых 3 класса: Paths, Path и Files. Ну а если быть точным, Path — это интерфейс, а не класс.
 

Для создания объектов класса File можно использовать один из следующих конструкторов:
File(File dir, String name) – указывается объект класса File (каталог) и имя файла
File(String path) – указывается путь к файлу без указания имени файла
File(String dirPath, String name) – указывается путь к файлу и имя файла
File(URI uri) – указывается объекта URI, описывающий файл
  
  		Конструкторы:
 - File(File parent, String child) - указывается объекта класса File (каталог) и имя файла
 - File(String pathname) - указывается путь к файлу без указания имени файла
 - File(String parent, String child) - указывается путь к файлу и имя файла
 - File(URI uri) - указывается объекта URI, описывающий файл
 		Методы
 	Класс File может использоваться для создания каталога или дерева каталогов. Также можно узнать свойства файлов (размер, дату 
 последнего изменения, режим чтения/записи), определить к какому типу (файл или каталог) относится объект File, удалить файл.
 - public String getName() - Возвращает имя файла или каталога, по указанному абстрактному имени пути.
 - public String getParent() -Возвращает строковый путь родителя абстрактного пути, или null, если путь не указывает родительский каталог.
 - public File getParentFile() - Возвращает абстрактный путь родителя абстрактного пути, или null, если путь не указывает родительский каталог.
 - public String getPath() - Преобразует абстрактный путь в строку.
 - public boolean isAbsolute() - Провяет, является ли абстрактный путь абсолютным. Возвращает true, если абстрактный путь является абсолютным, иначе false.
 - public String getAbsolutePath() - Возвращает строкой абсолютный путь.
 - public boolean canRead() - Проверяет, может ли приложение прочитать файл, по указанному абстрактному имени пути. Возвращает true тогда и только тогда, когда файл, указанный в абстрактном пути, существует и может быть прочитан приложением; в противном случае false.
 - public boolean canWrite() - Проверяет, может ли приложение изменять файл, по указанному абстрактному имени пути. Возвращает true тогда и только тогда, когда файловая система фактически содержит файл, по указанному абстрактному имени пути, и приложению разрешено записывать в файл; в противном случае false.
 - public boolean exists() - Проверяет, существует ли файл или каталог, по указанному абстрактному имени пути. Возвращает true тогда и только тогда, когда существует файл или каталог, по указанному абстрактному имени пути; в противном случае false.
 - public boolean isDirectory() - Проверяет, является ли файл, по указанному абстрактному имени пути, каталогом. Возвращает true тогда и только тогда, когда файл, обозначенный этим абстрактным именем, существует и является каталогом; в противном случае false.
 - public boolean isFile() - Проверяет, является ли файл, по указанному абстрактному имени пути, нормальным файлом. Файл является 
 			нормальным, если он не является каталогом и, кроме того, удовлетворяет другим системным критериям. Любой файл без
 			каталога, созданный приложением Java, гарантированно является нормальным файлом. Возвращает true тогда и только тогда, 
 			когда файл, обозначенный этим абстрактным пустым именем, существует и является нормальным файлом; в противном случае false.
 - public long lastModified() - Возвращает время последнего изменения файла, по указанному абстрактному имени пути. Возвращает длинное значение, представляющее время последнего изменения файла, измеренное в миллисекундах с эпохи (00:00:00 GMT, 1 января 1970 г.) или 0L, если файл не существует или возникает ошибка ввода-вывода.
 - public long length() - Возвращает длину файла, обозначенного этим абстрактным именем пути. Возвращаемое значение не указано, если путь указывает на каталог.
 - public boolean createNewFile() throws IOException - Атомарно создает новый пустой файл, названный этим абстрактным именем пути, 
 			тогда и только тогда, когда файл с этим именем еще не существует. Возвращает true, если названный файл не существует и 
 			был успешно создан; false, если именованный файл уже существует.
 - public boolean delete() - Удаляет файл или каталог, по указанному абстрактному имени пути. Если это имя пути обозначает каталог, 
 			каталог должен быть пустым, чтобы его можно было удалить. Возвращает true тогда и только тогда, когда файл или каталог
 			успешно удалены; в противном случае false.
 - public void deleteOnExit() - Просит, чтобы файл или каталог, обозначенные данным абстрактным пустым именем, были удалены при
  			завершении работы виртуальной машины.
 - public String[] list() - Возвращает массив строк, называющий файлы и каталоги в каталоге, обозначаемом этим абстрактным именем пути.
 - public String[] list(FilenameFilter filter) - Возвращает массив строк, называющий файлы и каталоги в каталоге, обозначаемом этим 
 			абстрактным пустым именем пути, которое удовлетворяет указанному фильтру.
 - public File[] listFiles() - Возвращает массив абстрактных путей, обозначающих файлы в каталоге, обозначаемом этим абстрактным именем пути.
 - public File[] listFiles(FileFilter filter) - Возвращает массив абстрактных путей, обозначающих файлы и каталоги в каталоге, 
 			обозначаемом этим абстрактным пустым именем пути, которое удовлетворяет указанному фильтру.
 - public boolean mkdir() - Создает каталог с именем этого абстрактного пути. Возвращает true тогда и только тогда, когда каталог был создан, в противном случае false.
 - public boolean mkdirs() - Создает каталог с именем этого абстрактного пути, включая любые необходимые, но несуществующие 
 			родительские каталоги. Возвращает true тогда и только тогда, когда каталог был создан вместе со всеми необходимыми родительскими каталогами, в противном случае false.
 - public boolean renameTo(File dest) - Переименовывает файл, обозначенный этим абстрактным пустым именем. Возвращает true тогда и только тогда, когда переименование выполнено успешно, в противном случае false.
 - public boolean setLastModified(long time) - Устанавливает последней модификацией время файла или каталога с именем этого абстрактного пути. Возвращает true тогда и только тогда, когда операция выполнена успешно, в противном случае false.
 - public boolean setReadOnly() - Помечает файл или каталог с именем этого абстрактного пути, чтобы разрешить только операции чтения.
  		Возвращает true тогда и только тогда, когда операция выполнена успешно, в противном случае false.
 - public static File createTempFile(String prefix, String suffix, File directory) throws IOException - Создает новый пустой файл в 
 		указанном каталоге, используя строковые prefix и suffix, чтобы сгенерировать его имя. Возвращает абстрактный путь, 
 		обозначающий вновь созданный пустой файл.
 - public static File createTempFile(String prefix, String suffix) throws IOException - Создает пустой файл в каталоге временных
  		файлов по умолчанию, используя данные prefix и suffix, чтобы сгенерировать его имя. Вызов этого метода эквивалентен вызову 
  		createTempFile(prefix, suffix, null). Возвращает абстрактное имя пути, обозначающее вновь созданный пустой файл.
 - public int compareTo(File pathname) - Сравнивает лексикографически два абстрактных пути. Возвращает ноль, если аргумент равен 
 		этому абстрактному пути, значение меньше нуля, если это абстрактное имя пути лексикографически меньше аргумента или значение
 		больше нуля, если этот абстрактный путь лексикографически больше аргумента.
 - public int compareTo(Object o) - Сравнивает этот абстрактный путь с другим объектом. Возвращает ноль, если аргумент равен этому 
 		абстрактному пути, значение меньше нуля, если это абстрактное имя пути лексикографически меньше аргумента или значение больше нуля, если этот абстрактный путь лексикографически больше аргумента.
- public boolean equals(Object obj) - Проверяет этот абстрактный путь на равенство с данным объектом. Возвращает true тогда и только
 	тогда, когда аргумент не является нулевым и представляет собой абстрактный путь, который обозначает тот же файл или каталог, что
 	и этот абстрактный путь.
- public String toString() - Возвращает строковый путь этого абстрактного пути. Это просто строка, возвращаемая методом getPath().
 */

public class t01_File_class_Obsolete{
public static void main(String[] args) throws IOException {
	 /* 01_File(String pathname) - Конструктор создает новый экземпляр файла, преобразовывая указанную строку pathname в
		абстрактный путь. 					*/
	System.out.println("01_File(String pathname) - !!! Конструктор не создает файл на диске, а создает объект класса для дальнейшей работы \n");
	File file1 = new File("C:\\Users\\dkuli\\Documents\\My_works\\Lessons\\src\\f22_In_Out_Streams\\T16_Files\\Data1.txt");
	File file2 = new File("C:\\Users\\dkuli\\Documents\\My_works\\Lessons\\src\\f22_In_Out_Streams\\T16_Files\\Data2.txt");
	file2.createNewFile();
	
	// 02_public String getName() - Возвращает имя файла или каталога, по указанному абстрактному имени пути.
	System.out.println("02_String getName() - Для объекта file без создания файла на диске - Вернул String название файла по"
			+ " созданному в констукторе абстрактному пути - " + file1.getName() );				//Результат - Data1.txt
	System.out.println("02_String getName() - Для объекта file2 с созданным файлом на диске - Вернул String название файла по"
			+ " созданному в констукторе абстрактному пути - " + file2.getName() + "\n");		//Результат - Data2.txt

		/* 03_public String getParent() - Возвращает строковый путь родителя абстрактного пути, или null, если путь не указывает 
	родительский каталог.   */
	System.out.println("03_String getParent() - Для объекта file без создания файла на диске - Вернул String путь каталогов до "
			+ "файла из конструктора абстрактного пути -  " + file1.getParent());		 	//Результат - C:\Users\dkuli\Documents\My_works\Lessons\src\f22_In_Out_Streams\T16_Files
	System.out.println("03_String getParent() - Для объекта file2 с созданным файлом на диске - Вернул String путь каталогов до "
			+ "файла из конструктора абстрактного пути -  " + file2.getParent() + "\n");		//Результат - C:\Users\dkuli\Documents\My_works\Lessons\src\f22_In_Out_Streams\T16_Files
		
	// 04_public String getAbsolutePath() - Возвращает строкой абсолютный путь.
	 System.out.println("04_String getAbsolutePath() - Для объекта file без создания файла на диске - Вернул String абсолютный путь"
	 		+ " в конструкторе объекта file1 - " + 	file1.getAbsolutePath());			// Результат - C:\Users\dkuli\Documents\My_works\Lessons\src\f22_In_Out_Streams\T16_Files\Data1.txt
	 System.out.println("04_String getAbsolutePath() - Для объекта file2 с созданным файлом на диске - Вернул String абсолютный путь"
	 		+ " в конструкторе объекта file1 - " + 	file2.getAbsolutePath() + "\n");	// Результат - C:\Users\dkuli\Documents\My_works\Lessons\src\f22_In_Out_Streams\T16_Files\Data2.txt
	 
	/* 05_ public File getParentFile() - Возвращает абстрактный путь родителя абстрактного пути, или null, если путь не указывает
	родительский каталог. 	 */
	File parentFile = file1.getParentFile();
	System.out.println("05_File getParentFile()- Вернул объект File, содержащий в конструкторе абстрактный путь до файла из "
			+ " конструктора абстрактного пути объекта file1   -  " + parentFile.getAbsolutePath() +"\n");
												// Результат - C:\Users\dkuli\Documents\My_works\Lessons\src\f22_In_Out_Streams\T16_Files
	
		// 06_public String getPath() - Преобразует абстрактный путь в строку.
	System.out.println("06_String getPath() - Пребразовал абстрактный путь File в строку String -  " + 
			parentFile.getPath() + "\n");		// Результат - C:\Users\dkuli\Documents\My_works\Lessons\src\f22_In_Out_Streams\T16_Files
	
		/*07_public boolean isAbsolute() - 	Провяет, является ли абстрактный путь абсолютным. Возвращает true, если абстрактный путь
	  является абсолютным, иначе false.  */
	System.out.println("07_Вернул true, т.к. parentFile является абстрактным путем  " + parentFile.isAbsolute());
	System.out.println("07_Вернул true, т.к. file2 является абстрактным путем  " + file2.isAbsolute() + "\n");
	
		/* 08_public String[] list() - Возвращает массив строк, называющий файлы и каталоги в каталоге, обозначаемом этим 
	абстрактным именем пути. 	 */
	String str[]; 
//	str = file1.list();				// ПОЧЕМУ ТО НЕ РАБОТАЕТ
//	System.out.println(str[0]);
//	System.out.println(str.length);
	System.out.println("08_String[] list() вернул массив строк абстрактного пути объекта file1 - ");
//	for (String element : str) {System.out.print(element + "\t");}
	System.out.println("\n");
	
	
	boolean bool = file1.canExecute();
	System.out.println(bool);
	
	String a = file1.getAbsolutePath();
	System.out.println(a);
	
//	try {
//		file1.createNewFile(); } 
//	catch (IOException e) { e.printStackTrace(); }
	
		/* Конструктор File(File parent, String child) - Конструктор создает новый экземпляр файла из родительского абстрактного пути и
	 и строки дочернего пути. */
	
	
	
	
	
		/* public boolean mkdir() - Создает каталог с именем этого абстрактного пути. Возвращает true тогда и только тогда, когда 
	каталог был создан, в противном случае false. */
		
	
	
	
//	 - public boolean mkdirs() - Создает каталог с именем этого абстрактного пути, включая любые необходимые, но несуществующие 
	
	
	
	
	}

}
